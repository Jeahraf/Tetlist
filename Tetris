import pygame import random  # Initialize Pygame pygame.init()  # Define constants SCREEN_WIDTH = 400 SCREEN_HEIGHT = 600 BLOCK_SIZE = 30 GRID_WIDTH = SCREEN_WIDTH // BLOCK_SIZE GRID_HEIGHT = SCREEN_HEIGHT // BLOCK_SIZE WHITE = (255, 255, 255) BLACK = (0, 0, 0) RED = (255, 0, 0) CYAN = (0, 255, 255) GREEN = (0, 255, 0) BLUE = (0, 0, 255) YELLOW = (255, 255, 0) ORANGE = (255, 165, 0) PURPLE = (128, 0, 128)  # Define Tetris shapes SHAPES = [     [[1, 1, 1, 1]],  # I-shape     [[1, 1, 1], [0, 1, 0]],  # T-shape     [[1, 1, 1], [1, 0, 0]],  # L-shape     [[1, 1, 1], [0, 0, 1]],  # J-shape     [[0, 1, 1], [1, 1, 0]],  # S-shape     [[1, 1], [1, 1]],  # O-shape     [[1, 1, 0], [0, 1, 1]],  # Z-shape ]  SHAPES_COLORS = [CYAN, PURPLE, ORANGE, BLUE, GREEN, YELLOW, RED]  # Initialize the screen screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT)) pygame.display.set_caption("Tetris")  # Define functions def draw_block(x, y, color):     pygame.draw.rect(screen, color, (x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE), 0)     pygame.draw.rect(screen, BLACK, (x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE), 1)  def create_shape():     shape = random.choice(SHAPES)     color = random.choice(SHAPES_COLORS)     return shape, color  def draw_shape(shape, color, x_offset, y_offset):     for y, row in enumerate(shape):         for x, block in enumerate(row):             if block:                 draw_block(x + x_offset, y + y_offset, color)  def main():     grid = [[0] * GRID_WIDTH for _ in range(GRID_HEIGHT)]     clock = pygame.time.Clock()      shape, color = create_shape()     shape_x = GRID_WIDTH // 2 - len(shape[0]) // 2     shape_y = 0      while True:         screen.fill(WHITE)          for event in pygame.event.get():             if event.type == pygame.QUIT:                 pygame.quit()                 quit()          keys = pygame.key.get_pressed()         if keys[pygame.K_LEFT]:             shape_x -= 1         if keys[pygame.K_RIGHT]:             shape_x += 1         if keys[pygame.K_DOWN]:             shape_y += 1          # Check if shape collides with the ground or other blocks         for y, row in enumerate(shape):             for x, block in enumerate(row):                 if block:                     if y + shape_y >= GRID_HEIGHT or x + shape_x < 0 or x + shape_x >= GRID_WIDTH or grid[y + shape_y][x + shape_x]:                         shape_y -= 1                         for y, row in enumerate(shape):                             for x, block in enumerate(row):                                 if block:                                     grid[y + shape_y][x + shape_x] = 1                         shape, color = create_shape()                         shape_x = GRID_WIDTH // 2 - len(shape[0]) // 2                         shape_y = 0          # Draw grid         for y, row in enumerate(grid):             for x, block in enumerate(row):                 if block:                     draw_block(x, y, BLACK)          # Draw falling shape         draw_shape(shape, color, shape_x, shape_y)          pygame.display.update()         clock.tick(10)  if __name__ == "__main__":     main()
